# bot/handlers.py
import logging
from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ContentType
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart
from .states import PaymentForm
from .config import AUTHORIZED_USERS, TELEGRAM_BOT_TOKEN
from .airtable_client import AirtableClient

router = Router()
logger = logging.getLogger(__name__)
airtable_client = AirtableClient()

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚Äî –ø–æ—Å–ª–µ /start –∏ –≤ –∫–æ–Ω—Ü–µ –¥–∏–∞–ª–æ–≥–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" ‚Äî –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤
skip_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∞"
skip_cancel_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def is_authorized(user) -> bool:
    return user.id in AUTHORIZED_USERS

# === –•–ï–ù–î–õ–ï–†–´ ===

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    if not is_authorized(message.from_user):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        return
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É",
        reply_markup=main_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É" (–°—Ü–µ–Ω–∞—Ä–∏–π 2)
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É")
async def start_payment_by_button(message: Message, state: FSMContext):
    if not is_authorized(message.from_user):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é")
        return
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –≤–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=skip_cancel_kb)
    await state.set_state(PaymentForm.attachment)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è (–°—Ü–µ–Ω–∞—Ä–∏–π 1)
@router.message(F.content_type.in_({
    ContentType.PHOTO,
    ContentType.DOCUMENT,
    ContentType.VIDEO,
    ContentType.AUDIO
}))
async def start_payment_by_attachment(message: Message, state: FSMContext, bot: Bot):
    if not is_authorized(message.from_user):
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤–ª–æ–∂–µ–Ω–∏—è
    file_id = None
    if message.photo:
        file_id = message.photo[-1].file_id  # –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    elif message.document:
        file_id = message.document.file_id
    elif message.video:
        file_id = message.video.file_id
    elif message.audio:
        file_id = message.audio.file_id

    await state.update_data(attachment=file_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=skip_cancel_kb)
    await state.set_state(PaymentForm.amount)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def handle_cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞", reply_markup=main_kb)
        return
    await state.clear()
    await message.answer("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω", reply_markup=main_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –Ω–∞ —à–∞–≥–µ –≤–ª–æ–∂–µ–Ω–∏—è (–°—Ü–µ–Ω–∞—Ä–∏–π 2)
@router.message(PaymentForm.attachment, F.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
async def skip_attachment(message: Message, state: FSMContext):
    await state.update_data(attachment=None)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=skip_cancel_kb)
    await state.set_state(PaymentForm.amount)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—É–º–º—ã
@router.message(PaymentForm.amount, F.text)
async def process_amount(message: Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(amount=None)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:", reply_markup=skip_cancel_kb)
        await state.set_state(PaymentForm.note)
        return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await handle_cancel(message, state)
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã (–º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π)
    amount_text = message.text.strip().replace(",", ".")
    try:
        amount = float(amount_text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=skip_cancel_kb)
        return

    await state.update_data(amount=amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:", reply_markup=skip_cancel_kb)
    await state.set_state(PaymentForm.note)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
@router.message(PaymentForm.note, F.text)
async def process_note(message: Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(note="")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:", reply_markup=skip_cancel_kb)
        await state.set_state(PaymentForm.order)
        return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await handle_cancel(message, state)
        return

    note_text = message.text.strip() if message.text else ""
    await state.update_data(note=note_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:", reply_markup=skip_cancel_kb)
    await state.set_state(PaymentForm.order)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–∞
@router.message(PaymentForm.order, F.text)
async def process_order(message: Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(order="")
        await _save_data_and_finish(message, state)
        return
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await handle_cancel(message, state)
        return

    order_text = message.text.strip() if message.text else ""
    await state.update_data(order=order_text)
    await _save_data_and_finish(message, state)

# === –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø ===

async def _save_data_and_finish(message: Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Airtable –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    data = await state.get_data()
    try:
        user = message.from_user
        sender_name = user.first_name
        if user.last_name:
            sender_name += " " + user.last_name

        # --- –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Airtable ---
        fields = {
            "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å": sender_name
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ Airtable —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
        if data.get('amount'):
            fields["–°—É–º–º–∞"] = data.get('amount')
        if data.get('note'):
            fields["–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"] = data.get('note')
        if data.get('order'):
            fields["–ó–∞–∫–∞–∑"] = data.get('order')

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
        attachment_value = []
        file_id = data.get('attachment')
        if file_id:
            try:
                bot = message.bot
                file = await bot.get_file(file_id)
                file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file.file_path}"
                attachment_value = [{"url": file_url}]
                fields["–í–ª–æ–∂–µ–Ω–∏–µ"] = attachment_value
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Airtable
        await airtable_client.create_record(fields)

        # --- –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ ---
        result_lines = [f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if data.get('order'):
            result_lines.append(f"<b>–ó–∞–∫–∞–∑:</b> {data.get('order')}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–æ–∂–µ–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if file_id:
            result_lines.append(f"<b>–í–ª–æ–∂–µ–Ω–∏–µ:</b> üìé")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if data.get('amount'):
            result_lines.append(f"<b>–°—É–º–º–∞:</b> {data.get('amount')}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if data.get('note'):
            result_lines.append(f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {data.get('note')}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–≤—Å–µ–≥–¥–∞)
        result_lines.append(f"<b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b> {sender_name}")

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_message = "\n".join(result_lines)

        await message.answer(
            final_message,
            reply_markup=main_kb
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Airtable:\n<code>{str(e)}</code>"
        )
    finally:
        await state.clear()
        

        

